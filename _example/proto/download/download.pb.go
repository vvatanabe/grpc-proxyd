// Code generated by protoc-gen-go. DO NOT EDIT.
// source: download/download.proto

package download

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DownloadRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_585011bbfcfb0b93, []int{0}
}

func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadRequest.Unmarshal(m, b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadRequest.Size(m)
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DownloadResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadResponse) Reset()         { *m = DownloadResponse{} }
func (m *DownloadResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadResponse) ProtoMessage()    {}
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_585011bbfcfb0b93, []int{1}
}

func (m *DownloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadResponse.Unmarshal(m, b)
}
func (m *DownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadResponse.Marshal(b, m, deterministic)
}
func (m *DownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadResponse.Merge(m, src)
}
func (m *DownloadResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadResponse.Size(m)
}
func (m *DownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadResponse proto.InternalMessageInfo

func (m *DownloadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DownloadRequest)(nil), "download.DownloadRequest")
	proto.RegisterType((*DownloadResponse)(nil), "download.DownloadResponse")
}

func init() { proto.RegisterFile("download/download.proto", fileDescriptor_585011bbfcfb0b93) }

var fileDescriptor_585011bbfcfb0b93 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xc9, 0x2f, 0xcf,
	0xcb, 0xc9, 0x4f, 0x4c, 0xd1, 0x87, 0x31, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60,
	0x7c, 0x25, 0x55, 0x2e, 0x7e, 0x17, 0x28, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48,
	0x88, 0x8b, 0x25, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x56,
	0x52, 0xe3, 0x12, 0x40, 0x28, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x05, 0xa9, 0x4b, 0x49, 0x2c,
	0x49, 0x04, 0xab, 0xe3, 0x09, 0x02, 0xb3, 0x8d, 0xc2, 0x10, 0xc6, 0x05, 0xa7, 0x16, 0x95, 0x65,
	0x26, 0xa7, 0x0a, 0x39, 0x73, 0x71, 0xc0, 0x84, 0x84, 0x24, 0xf5, 0xe0, 0x0e, 0x41, 0xb3, 0x55,
	0x4a, 0x0a, 0x9b, 0x14, 0xc4, 0x26, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xbb, 0x8d, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xfa, 0x4e, 0xe0, 0xac, 0xd2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DownloadServiceClient interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (DownloadService_DownloadClient, error)
}

type downloadServiceClient struct {
	cc *grpc.ClientConn
}

func NewDownloadServiceClient(cc *grpc.ClientConn) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (DownloadService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DownloadService_serviceDesc.Streams[0], "/download.DownloadService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &downloadServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DownloadService_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type downloadServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *downloadServiceDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloadServiceServer is the server API for DownloadService service.
type DownloadServiceServer interface {
	Download(*DownloadRequest, DownloadService_DownloadServer) error
}

// UnimplementedDownloadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (*UnimplementedDownloadServiceServer) Download(req *DownloadRequest, srv DownloadService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterDownloadServiceServer(s *grpc.Server, srv DownloadServiceServer) {
	s.RegisterService(&_DownloadService_serviceDesc, srv)
}

func _DownloadService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloadServiceServer).Download(m, &downloadServiceDownloadServer{stream})
}

type DownloadService_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type downloadServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *downloadServiceDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DownloadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "download.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _DownloadService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "download/download.proto",
}
